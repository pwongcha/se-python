"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from aktest_se import models, utils
from aktest_se._hooks import HookContext
from aktest_se.types import BaseModel, OptionalNullable, UNSET
from enum import Enum
from typing import Optional, Union, cast


class GetChangeAllowedInputParamAcceptEnum(str, Enum):
    APPLICATION_VND_AKAMAI_CPS_CHANGE_MANAGEMENT_INFO_V1_PLUS_JSON = (
        "application/vnd.akamai.cps.change-management-info.v1+json"
    )
    APPLICATION_VND_AKAMAI_CPS_CHANGE_MANAGEMENT_INFO_V2_PLUS_JSON = (
        "application/vnd.akamai.cps.change-management-info.v2+json"
    )
    APPLICATION_VND_AKAMAI_CPS_CHANGE_MANAGEMENT_INFO_V4_PLUS_JSON = (
        "application/vnd.akamai.cps.change-management-info.v4+json"
    )
    APPLICATION_VND_AKAMAI_CPS_CHANGE_MANAGEMENT_INFO_V5_PLUS_JSON = (
        "application/vnd.akamai.cps.change-management-info.v5+json"
    )
    APPLICATION_VND_AKAMAI_CPS_CHANGE_MANAGEMENT_INFO_V6_PLUS_JSON = (
        "application/vnd.akamai.cps.change-management-info.v6+json"
    )
    APPLICATION_VND_AKAMAI_CPS_CSR_V1_PLUS_JSON = (
        "application/vnd.akamai.cps.csr.v1+json"
    )
    APPLICATION_VND_AKAMAI_CPS_CSR_V2_PLUS_JSON = (
        "application/vnd.akamai.cps.csr.v2+json"
    )
    APPLICATION_VND_AKAMAI_CPS_DEPLOYMENT_V3_PLUS_JSON = (
        "application/vnd.akamai.cps.deployment.v3+json"
    )
    APPLICATION_VND_AKAMAI_CPS_DEPLOYMENT_V6_PLUS_JSON = (
        "application/vnd.akamai.cps.deployment.v6+json"
    )
    APPLICATION_VND_AKAMAI_CPS_DEPLOYMENT_V7_PLUS_JSON = (
        "application/vnd.akamai.cps.deployment.v7+json"
    )
    APPLICATION_VND_AKAMAI_CPS_DEPLOYMENT_V8_PLUS_JSON = (
        "application/vnd.akamai.cps.deployment.v8+json"
    )
    APPLICATION_VND_AKAMAI_CPS_DV_CHALLENGES_V1_PLUS_JSON = (
        "application/vnd.akamai.cps.dv-challenges.v1+json"
    )
    APPLICATION_VND_AKAMAI_CPS_DV_CHALLENGES_V2_PLUS_JSON = (
        "application/vnd.akamai.cps.dv-challenges.v2+json"
    )
    APPLICATION_VND_AKAMAI_CPS_WARNINGS_V1_PLUS_JSON = (
        "application/vnd.akamai.cps.warnings.v1+json"
    )


class Changes(BaseSDK):
    r"""Manage changes to an enrollment's network deployment."""

    def get_enrollment_change(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetEnrollmentChangeResponseBody:
        r"""Get change status

        Gets the status of a pending change.
        https://techdocs.akamai.com/cps/reference/get-enrollment-change - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetEnrollmentChangeRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/changes/{changeId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change.v2+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-enrollment-change",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetEnrollmentChangeResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_enrollment_change_async(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetEnrollmentChangeResponseBody:
        r"""Get change status

        Gets the status of a pending change.
        https://techdocs.akamai.com/cps/reference/get-enrollment-change - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetEnrollmentChangeRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/changes/{changeId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change.v2+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-enrollment-change",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetEnrollmentChangeResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def delete_enrollment_change(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.DeleteEnrollmentChangeResponseBody:
        r"""Cancel a change

        Cancels a pending change.
        https://techdocs.akamai.com/cps/reference/delete-enrollment-change - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteEnrollmentChangeRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="DELETE",
            path="/enrollments/{enrollmentId}/changes/{changeId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-id.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="delete-enrollment-change",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-id.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.DeleteEnrollmentChangeResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def delete_enrollment_change_async(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.DeleteEnrollmentChangeResponseBody:
        r"""Cancel a change

        Cancels a pending change.
        https://techdocs.akamai.com/cps/reference/delete-enrollment-change - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteEnrollmentChangeRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="DELETE",
            path="/enrollments/{enrollmentId}/changes/{changeId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-id.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="delete-enrollment-change",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-id.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.DeleteEnrollmentChangeResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_change_deployment_schedule(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetChangeDeploymentScheduleResponseBody:
        r"""Get a deployment schedule

        Gets the current deployment schedule settings describing when a change deploys to the network.
        https://techdocs.akamai.com/cps/reference/get-change-deployment-schedule - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetChangeDeploymentScheduleRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/changes/{changeId}/deployment-schedule",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployment-schedule.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-change-deployment-schedule",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment-schedule.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetChangeDeploymentScheduleResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_change_deployment_schedule_async(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetChangeDeploymentScheduleResponseBody:
        r"""Get a deployment schedule

        Gets the current deployment schedule settings describing when a change deploys to the network.
        https://techdocs.akamai.com/cps/reference/get-change-deployment-schedule - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetChangeDeploymentScheduleRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/changes/{changeId}/deployment-schedule",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployment-schedule.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-change-deployment-schedule",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment-schedule.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetChangeDeploymentScheduleResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_change_allowed_input_param(
        self,
        *,
        allowed_input_type_param: models.AllowedInputTypeParam,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetChangeAllowedInputParamAcceptEnum] = None,
    ) -> models.GetChangeAllowedInputParamResponse:
        r"""Get a change

        Get detailed information of a pending change. Below is a sample where `allowedInput[].type` has the value `third-party-csr`. The acceptable `Accept` header depends on the value of the `allowedInput.type` for the Change instance. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details.
        https://techdocs.akamai.com/cps/reference/get-change-allowed-input-param - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param allowed_input_type_param: __Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details. Currently supported values include `change-management-info`, `lets-encrypt-challenges`, `post-verification-warnings`, `pre-verification-warnings`, `third-party-csr`.
        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetChangeAllowedInputParamRequest(
            allowed_input_type_param=allowed_input_type_param,
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/changes/{changeId}/input/info/{allowedInputTypeParam}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/vnd.akamai.cps.change-management-info.v1+json;q=1, application/vnd.akamai.cps.change-management-info.v2+json;q=0.93, application/vnd.akamai.cps.change-management-info.v4+json;q=0.86, application/vnd.akamai.cps.change-management-info.v5+json;q=0.79, application/vnd.akamai.cps.change-management-info.v6+json;q=0.71, application/vnd.akamai.cps.csr.v1+json;q=0.64, application/vnd.akamai.cps.csr.v2+json;q=0.57, application/vnd.akamai.cps.deployment.v3+json;q=0.50, application/vnd.akamai.cps.deployment.v6+json;q=0.43, application/vnd.akamai.cps.deployment.v7+json;q=0.36, application/vnd.akamai.cps.deployment.v8+json;q=0.29, application/vnd.akamai.cps.dv-challenges.v1+json;q=0.21, application/vnd.akamai.cps.dv-challenges.v2+json;q=0.14, application/vnd.akamai.cps.warnings.v1+json;q=0",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-change-allowed-input-param",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetChangeAllowedInputParamResponseBody
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetChangeAllowedInputParamChangesResponseBody
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v4+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponseResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v5+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v6+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsChangeManagementInfoV6PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.csr.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsCsrV1PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.csr.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsCsrV2PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v3+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV3PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v6+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV6PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v7+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV7PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV8PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.dv-challenges.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDvChallengesV1PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.dv-challenges.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDvChallengesV2PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.warnings.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsWarningsV1PlusJSONResponseBody,
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_change_allowed_input_param_async(
        self,
        *,
        allowed_input_type_param: models.AllowedInputTypeParam,
        change_id: int,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetChangeAllowedInputParamAcceptEnum] = None,
    ) -> models.GetChangeAllowedInputParamResponse:
        r"""Get a change

        Get detailed information of a pending change. Below is a sample where `allowedInput[].type` has the value `third-party-csr`. The acceptable `Accept` header depends on the value of the `allowedInput.type` for the Change instance. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details.
        https://techdocs.akamai.com/cps/reference/get-change-allowed-input-param - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param allowed_input_type_param: __Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details. Currently supported values include `change-management-info`, `lets-encrypt-challenges`, `post-verification-warnings`, `pre-verification-warnings`, `third-party-csr`.
        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetChangeAllowedInputParamRequest(
            allowed_input_type_param=allowed_input_type_param,
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/changes/{changeId}/input/info/{allowedInputTypeParam}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/vnd.akamai.cps.change-management-info.v1+json;q=1, application/vnd.akamai.cps.change-management-info.v2+json;q=0.93, application/vnd.akamai.cps.change-management-info.v4+json;q=0.86, application/vnd.akamai.cps.change-management-info.v5+json;q=0.79, application/vnd.akamai.cps.change-management-info.v6+json;q=0.71, application/vnd.akamai.cps.csr.v1+json;q=0.64, application/vnd.akamai.cps.csr.v2+json;q=0.57, application/vnd.akamai.cps.deployment.v3+json;q=0.50, application/vnd.akamai.cps.deployment.v6+json;q=0.43, application/vnd.akamai.cps.deployment.v7+json;q=0.36, application/vnd.akamai.cps.deployment.v8+json;q=0.29, application/vnd.akamai.cps.dv-challenges.v1+json;q=0.21, application/vnd.akamai.cps.dv-challenges.v2+json;q=0.14, application/vnd.akamai.cps.warnings.v1+json;q=0",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-change-allowed-input-param",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetChangeAllowedInputParamResponseBody
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetChangeAllowedInputParamChangesResponseBody
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v4+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponseResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v5+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-management-info.v6+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsChangeManagementInfoV6PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.csr.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsCsrV1PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.csr.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsCsrV2PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v3+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV3PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v6+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV6PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v7+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV7PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDeploymentV8PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.dv-challenges.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDvChallengesV1PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.dv-challenges.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsDvChallengesV2PlusJSONResponseBody,
            )
        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.warnings.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text,
                models.GetChangeAllowedInputParamChangesResponse200ApplicationVndAkamaiCpsWarningsV1PlusJSONResponseBody,
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def post_change_allowed_input_param(
        self,
        *,
        request: Union[
            models.PostChangeAllowedInputParamRequest,
            models.PostChangeAllowedInputParamRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PostChangeAllowedInputParamResponseBody:
        r"""Update a change

        Updates a pending change. Below is a sample where `allowedInput[].type` has the value `third-party-cert-and-trust-chain`. The acceptable `Content-Type` and `Accept` headers depends on the value of the `allowedInput.type` for the Change instance. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details.
        https://techdocs.akamai.com/cps/reference/post-change-allowed-input-param - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.PostChangeAllowedInputParamRequest
            )
        request = cast(models.PostChangeAllowedInputParamRequest, request)

        req = self.build_request(
            method="POST",
            path="/enrollments/{enrollmentId}/changes/{changeId}/input/update/{allowedInputTypeParam}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-id.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                True,
                "json",
                Optional[
                    models.PostChangeAllowedInputParamChangesRequestApplicationVndAkamaiCpsCertificateAndTrustChainV2PlusJSONRequestBody
                ],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="post-change-allowed-input-param",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-id.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PostChangeAllowedInputParamResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def post_change_allowed_input_param_async(
        self,
        *,
        request: Union[
            models.PostChangeAllowedInputParamRequest,
            models.PostChangeAllowedInputParamRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PostChangeAllowedInputParamResponseBody:
        r"""Update a change

        Updates a pending change. Below is a sample where `allowedInput[].type` has the value `third-party-cert-and-trust-chain`. The acceptable `Content-Type` and `Accept` headers depends on the value of the `allowedInput.type` for the Change instance. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details.
        https://techdocs.akamai.com/cps/reference/post-change-allowed-input-param - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.PostChangeAllowedInputParamRequest
            )
        request = cast(models.PostChangeAllowedInputParamRequest, request)

        req = self.build_request_async(
            method="POST",
            path="/enrollments/{enrollmentId}/changes/{changeId}/input/update/{allowedInputTypeParam}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-id.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                True,
                "json",
                Optional[
                    models.PostChangeAllowedInputParamChangesRequestApplicationVndAkamaiCpsCertificateAndTrustChainV2PlusJSONRequestBody
                ],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="post-change-allowed-input-param",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-id.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PostChangeAllowedInputParamResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_history_changes(
        self,
        *,
        enrollment_id: int,
        include_all: Optional[bool] = False,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetHistoryChangesResponseBody:
        r"""Get change history

        Change history of an enrollment.
        https://techdocs.akamai.com/cps/reference/get-history-changes - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param include_all: Retrieve all changes or certificates.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetHistoryChangesRequest(
            enrollment_id=enrollment_id,
            include_all=include_all,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/history/changes",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-history.v5+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-history-changes",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-history.v5+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetHistoryChangesResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_history_changes_async(
        self,
        *,
        enrollment_id: int,
        include_all: Optional[bool] = False,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetHistoryChangesResponseBody:
        r"""Get change history

        Change history of an enrollment.
        https://techdocs.akamai.com/cps/reference/get-history-changes - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param include_all: Retrieve all changes or certificates.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetHistoryChangesRequest(
            enrollment_id=enrollment_id,
            include_all=include_all,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/history/changes",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-history.v5+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-history-changes",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-history.v5+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetHistoryChangesResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )
