"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from aktest_se import models, utils
from aktest_se._hooks import HookContext
from aktest_se.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union, cast


class Enrollments(BaseSDK):
    r"""Manage your certificate enrollments."""

    def post_enrollment(
        self,
        *,
        request: Union[
            models.PostEnrollmentRequest, models.PostEnrollmentRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PostEnrollmentResponseBody:
        r"""Create an enrollment

        Creates an enrollment that contains all the information about the process that your certificate goes through from the time you request it, through renewal, and as you obtain subsequent versions. To select a Client TLS Renegotiation option, use the CPS user interface. For details, see [Edit deployment settings](doc:view-edit-network-deploy-settings). Note that you can create one certificate every five minutes, per account. Creating a certificate for the same contract within the five-minute interval results in a 409 response.
        https://techdocs.akamai.com/cps/reference/post-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.PostEnrollmentRequest)
        request = cast(models.PostEnrollmentRequest, request)

        req = self.build_request(
            method="POST",
            path="/enrollments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment-status.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.PostEnrollmentRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="post-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "202", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PostEnrollmentResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def post_enrollment_async(
        self,
        *,
        request: Union[
            models.PostEnrollmentRequest, models.PostEnrollmentRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PostEnrollmentResponseBody:
        r"""Create an enrollment

        Creates an enrollment that contains all the information about the process that your certificate goes through from the time you request it, through renewal, and as you obtain subsequent versions. To select a Client TLS Renegotiation option, use the CPS user interface. For details, see [Edit deployment settings](doc:view-edit-network-deploy-settings). Note that you can create one certificate every five minutes, per account. Creating a certificate for the same contract within the five-minute interval results in a 409 response.
        https://techdocs.akamai.com/cps/reference/post-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.PostEnrollmentRequest)
        request = cast(models.PostEnrollmentRequest, request)

        req = self.build_request_async(
            method="POST",
            path="/enrollments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment-status.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.PostEnrollmentRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="post-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "202", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PostEnrollmentResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_enrollments(
        self,
        *,
        contract_id: str,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetEnrollmentsResponseBody:
        r"""List enrollments

        A list of the names of each enrollment.
        https://techdocs.akamai.com/cps/reference/get-enrollments - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param contract_id: Specify the contract on which to operate or view.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetEnrollmentsRequest(
            contract_id=contract_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollments.v11+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-enrollments", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollments.v11+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetEnrollmentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_enrollments_async(
        self,
        *,
        contract_id: str,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetEnrollmentsResponseBody:
        r"""List enrollments

        A list of the names of each enrollment.
        https://techdocs.akamai.com/cps/reference/get-enrollments - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param contract_id: Specify the contract on which to operate or view.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetEnrollmentsRequest(
            contract_id=contract_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollments.v11+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-enrollments", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollments.v11+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetEnrollmentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_enrollment(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetEnrollmentResponseBody:
        r"""Get an enrollment

        Gets an enrollment.
        https://techdocs.akamai.com/cps/reference/get-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetEnrollmentRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment.v12+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollment.v12+json"
        ):
            return utils.unmarshal_json(http_res.text, models.GetEnrollmentResponseBody)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_enrollment_async(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetEnrollmentResponseBody:
        r"""Get an enrollment

        Gets an enrollment.
        https://techdocs.akamai.com/cps/reference/get-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetEnrollmentRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment.v12+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollment.v12+json"
        ):
            return utils.unmarshal_json(http_res.text, models.GetEnrollmentResponseBody)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def put_enrollment(
        self,
        *,
        request: Union[
            models.PutEnrollmentRequest, models.PutEnrollmentRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PutEnrollmentResponse:
        r"""Update an enrollment

        Updates an enrollment with changes. Response type varies depending on the type and impact of change. For example, changing SANs list may return HTTP 202 Accepted since the operation requires a new certificate and network deployment operations, and thus can't be completed without a change. On the contrary, for example a Technical Contact name change may return HTTP 200 OK assuming there are no active change and when the operation does not require a new certificate.

        Note that `fipsMode` requires that TLS 1.2, TLS 1.3, or both are enabled on the certificate. You can’t list these TLS versions as disabled in the `disallowedTlsVersions` deployment object. When `fipsMode` is enabled, you need to use an active (non-deprecated) cipher profile for both `mustHaveCiphers` and `preferredCiphers`. For details, see [Update SSL/TLS cipher profiles](doc:cipher-profiles).
        https://techdocs.akamai.com/cps/reference/put-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.PutEnrollmentRequest)
        request = cast(models.PutEnrollmentRequest, request)

        req = self.build_request(
            method="PUT",
            path="/enrollments/{enrollmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment-status.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.PutEnrollmentRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="put-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(http_res.text, models.PutEnrollmentResponseBody)
        if utils.match_response(
            http_res, "202", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PutEnrollmentEnrollmentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def put_enrollment_async(
        self,
        *,
        request: Union[
            models.PutEnrollmentRequest, models.PutEnrollmentRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PutEnrollmentResponse:
        r"""Update an enrollment

        Updates an enrollment with changes. Response type varies depending on the type and impact of change. For example, changing SANs list may return HTTP 202 Accepted since the operation requires a new certificate and network deployment operations, and thus can't be completed without a change. On the contrary, for example a Technical Contact name change may return HTTP 200 OK assuming there are no active change and when the operation does not require a new certificate.

        Note that `fipsMode` requires that TLS 1.2, TLS 1.3, or both are enabled on the certificate. You can’t list these TLS versions as disabled in the `disallowedTlsVersions` deployment object. When `fipsMode` is enabled, you need to use an active (non-deprecated) cipher profile for both `mustHaveCiphers` and `preferredCiphers`. For details, see [Update SSL/TLS cipher profiles](doc:cipher-profiles).
        https://techdocs.akamai.com/cps/reference/put-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.PutEnrollmentRequest)
        request = cast(models.PutEnrollmentRequest, request)

        req = self.build_request_async(
            method="PUT",
            path="/enrollments/{enrollmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment-status.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.PutEnrollmentRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="put-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(http_res.text, models.PutEnrollmentResponseBody)
        if utils.match_response(
            http_res, "202", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PutEnrollmentEnrollmentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def delete_enrollment(
        self,
        *,
        request: Union[
            models.DeleteEnrollmentRequest, models.DeleteEnrollmentRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.DeleteEnrollmentResponse:
        r"""Remove an enrollment

        Removes an enrollment from CPS. The response code varies depending on the state of the enrollment. Deleting an enrollment in the future, or deleting when the enrollment has a certificate deployed to the network, may result in a 202 response. Deleting an enrollment that hasn't yet deployed any certificate to the network responds immediately with a 200 code.
        https://techdocs.akamai.com/cps/reference/delete-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.DeleteEnrollmentRequest)
        request = cast(models.DeleteEnrollmentRequest, request)

        req = self.build_request(
            method="DELETE",
            path="/enrollments/{enrollmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment-status.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="delete-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.DeleteEnrollmentResponseBody
            )
        if utils.match_response(
            http_res, "202", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.DeleteEnrollmentEnrollmentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def delete_enrollment_async(
        self,
        *,
        request: Union[
            models.DeleteEnrollmentRequest, models.DeleteEnrollmentRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.DeleteEnrollmentResponse:
        r"""Remove an enrollment

        Removes an enrollment from CPS. The response code varies depending on the state of the enrollment. Deleting an enrollment in the future, or deleting when the enrollment has a certificate deployed to the network, may result in a 202 response. Deleting an enrollment that hasn't yet deployed any certificate to the network responds immediately with a 200 code.
        https://techdocs.akamai.com/cps/reference/delete-enrollment - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.DeleteEnrollmentRequest)
        request = cast(models.DeleteEnrollmentRequest, request)

        req = self.build_request_async(
            method="DELETE",
            path="/enrollments/{enrollmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.enrollment-status.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="delete-enrollment", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.DeleteEnrollmentResponseBody
            )
        if utils.match_response(
            http_res, "202", "application/vnd.akamai.cps.enrollment-status.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.DeleteEnrollmentEnrollmentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_dv_history(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDvHistoryResponseBody:
        r"""Get DV history

        Domain name Validation history for the enrollment.
        https://techdocs.akamai.com/cps/reference/get-dv-history - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDvHistoryRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/dv-history",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.dv-history.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-dv-history", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.dv-history.v1+json"
        ):
            return utils.unmarshal_json(http_res.text, models.GetDvHistoryResponseBody)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_dv_history_async(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDvHistoryResponseBody:
        r"""Get DV history

        Domain name Validation history for the enrollment.
        https://techdocs.akamai.com/cps/reference/get-dv-history - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDvHistoryRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/dv-history",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.dv-history.v1+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-dv-history", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.dv-history.v1+json"
        ):
            return utils.unmarshal_json(http_res.text, models.GetDvHistoryResponseBody)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_history_certificates(
        self,
        *,
        enrollment_id: int,
        include_all: Optional[bool] = False,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetHistoryCertificatesResponseBody:
        r"""Get certificate history

        View the certificate history. To view deployed certificates and their expiration dates, run the [Get production deployment](ref:get-deployments-production) operation. Note that for enrollments with six certificates or fewer, the response yields up to twelve years of data per certificate. If there are more than six certificates in the enrollment, the response shows a truncated set. To view all changes or certificates, use the `includeAll=true` query parameter in the request.
        https://techdocs.akamai.com/cps/reference/get-history-certificates - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param include_all: Retrieve all changes or certificates.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetHistoryCertificatesRequest(
            enrollment_id=enrollment_id,
            include_all=include_all,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/history/certificates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.certificate-history.v2+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-history-certificates",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.certificate-history.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetHistoryCertificatesResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_history_certificates_async(
        self,
        *,
        enrollment_id: int,
        include_all: Optional[bool] = False,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetHistoryCertificatesResponseBody:
        r"""Get certificate history

        View the certificate history. To view deployed certificates and their expiration dates, run the [Get production deployment](ref:get-deployments-production) operation. Note that for enrollments with six certificates or fewer, the response yields up to twelve years of data per certificate. If there are more than six certificates in the enrollment, the response shows a truncated set. To view all changes or certificates, use the `includeAll=true` query parameter in the request.
        https://techdocs.akamai.com/cps/reference/get-history-certificates - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param include_all: Retrieve all changes or certificates.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetHistoryCertificatesRequest(
            enrollment_id=enrollment_id,
            include_all=include_all,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/history/certificates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.certificate-history.v2+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-history-certificates",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.certificate-history.v2+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetHistoryCertificatesResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )
