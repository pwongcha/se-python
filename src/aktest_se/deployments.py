"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from aktest_se import models, utils
from aktest_se._hooks import HookContext
from aktest_se.types import OptionalNullable, UNSET
from typing import Optional, Union


class Deployments(BaseSDK):
    r"""Manage your certificate deployments."""

    def put_change_deployment_schedule(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        request_body: Union[
            models.PutChangeDeploymentScheduleRequestBody,
            models.PutChangeDeploymentScheduleRequestBodyTypedDict,
        ],
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PutChangeDeploymentScheduleResponseBody:
        r"""Update a deployment schedule

        Updates the current deployment schedule.
        https://techdocs.akamai.com/cps/reference/put-change-deployment-schedule - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param request_body:
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.PutChangeDeploymentScheduleRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
            request_body=utils.get_pydantic_model(
                request_body, models.PutChangeDeploymentScheduleRequestBody
            ),
        )

        req = self.build_request(
            method="PUT",
            path="/enrollments/{enrollmentId}/changes/{changeId}/deployment-schedule",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-id.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.PutChangeDeploymentScheduleRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="put-change-deployment-schedule",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-id.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PutChangeDeploymentScheduleResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def put_change_deployment_schedule_async(
        self,
        *,
        change_id: int,
        enrollment_id: int,
        request_body: Union[
            models.PutChangeDeploymentScheduleRequestBody,
            models.PutChangeDeploymentScheduleRequestBodyTypedDict,
        ],
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.PutChangeDeploymentScheduleResponseBody:
        r"""Update a deployment schedule

        Updates the current deployment schedule.
        https://techdocs.akamai.com/cps/reference/put-change-deployment-schedule - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param change_id: The change for this enrollment on which to perform the desired operation.
        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param request_body:
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.PutChangeDeploymentScheduleRequest(
            change_id=change_id,
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
            request_body=utils.get_pydantic_model(
                request_body, models.PutChangeDeploymentScheduleRequestBody
            ),
        )

        req = self.build_request_async(
            method="PUT",
            path="/enrollments/{enrollmentId}/changes/{changeId}/deployment-schedule",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.change-id.v1+json",
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.PutChangeDeploymentScheduleRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="put-change-deployment-schedule",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.change-id.v1+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.PutChangeDeploymentScheduleResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_deployments(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDeploymentsResponseBody:
        r"""List deployments

        Lists the deployments for an enrollment.
        https://techdocs.akamai.com/cps/reference/get-deployments - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDeploymentsRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/deployments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployments.v8+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-deployments", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployments.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetDeploymentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_deployments_async(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDeploymentsResponseBody:
        r"""List deployments

        Lists the deployments for an enrollment.
        https://techdocs.akamai.com/cps/reference/get-deployments - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDeploymentsRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/deployments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployments.v8+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-deployments", oauth2_scopes=[], security_source=None
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployments.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetDeploymentsResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_deployments_production(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDeploymentsProductionResponseBody:
        r"""Get production deployment

        Gets the enrollments deployed on the production network.
        https://techdocs.akamai.com/cps/reference/get-deployments-production - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDeploymentsProductionRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/deployments/production",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployment.v8+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-deployments-production",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetDeploymentsProductionResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_deployments_production_async(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDeploymentsProductionResponseBody:
        r"""Get production deployment

        Gets the enrollments deployed on the production network.
        https://techdocs.akamai.com/cps/reference/get-deployments-production - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDeploymentsProductionRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/deployments/production",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployment.v8+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-deployments-production",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetDeploymentsProductionResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get_deployment_staging(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDeploymentStagingResponseBody:
        r"""Get staging deployment

        Gets the enrollments deployed on the staging network.
        https://techdocs.akamai.com/cps/reference/get-deployment-staging - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDeploymentStagingRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request(
            method="GET",
            path="/enrollments/{enrollmentId}/deployments/staging",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployment.v8+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get-deployment-staging",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetDeploymentStagingResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_deployment_staging_async(
        self,
        *,
        enrollment_id: int,
        account_switch_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.GetDeploymentStagingResponseBody:
        r"""Get staging deployment

        Gets the enrollments deployed on the staging network.
        https://techdocs.akamai.com/cps/reference/get-deployment-staging - See documentation for this operation in Akamai's Certificate Provisioning System API

        :param enrollment_id: Enrollment on which to perform the desired operation.
        :param account_switch_key: For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDeploymentStagingRequest(
            enrollment_id=enrollment_id,
            account_switch_key=account_switch_key,
        )

        req = self.build_request_async(
            method="GET",
            path="/enrollments/{enrollmentId}/deployments/staging",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/vnd.akamai.cps.deployment.v8+json",
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get-deployment-staging",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(
            http_res, "200", "application/vnd.akamai.cps.deployment.v8+json"
        ):
            return utils.unmarshal_json(
                http_res.text, models.GetDeploymentStagingResponseBody
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )
