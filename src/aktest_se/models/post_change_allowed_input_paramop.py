"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from aktest_se.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from aktest_se.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PathParamAllowedInputTypeParam(str, Enum):
    r"""__Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details. Currently supported values include `change-management-ack`, `lets-encrypt-challenges-completed`, `post-verification-warnings-ack`, `pre-verification-warnings-ack`, `third-party-cert-and-trust-chain`."""

    CHANGE_MANAGEMENT_ACK = "change-management-ack"
    LETS_ENCRYPT_CHALLENGES_COMPLETED = "lets-encrypt-challenges-completed"
    POST_VERIFICATION_WARNINGS_ACK = "post-verification-warnings-ack"
    PRE_VERIFICATION_WARNINGS_ACK = "pre-verification-warnings-ack"
    THIRD_PARTY_CERT_AND_TRUST_CHAIN = "third-party-cert-and-trust-chain"


class KeyAlgorithm(str, Enum):
    r"""The key algorithm of the certificate, either `ECDSA` or `RSA`. Appears as `null` in responses until you specify it."""

    ECDSA = "ECDSA"
    RSA = "RSA"


class CertificatesAndTrustChainsTypedDict(TypedDict):
    certificate: Nullable[str]
    r"""The certificate text. Appears as `null` in responses until you specify it."""
    key_algorithm: KeyAlgorithm
    r"""The key algorithm of the certificate, either `ECDSA` or `RSA`. Appears as `null` in responses until you specify it."""
    trust_chain: NotRequired[Nullable[str]]
    r"""The trust chain text. You may have many trust chains or none. Appears as `null` when no trust chains exist."""


class CertificatesAndTrustChains(BaseModel):
    certificate: Nullable[str]
    r"""The certificate text. Appears as `null` in responses until you specify it."""

    key_algorithm: Annotated[KeyAlgorithm, pydantic.Field(alias="keyAlgorithm")]
    r"""The key algorithm of the certificate, either `ECDSA` or `RSA`. Appears as `null` in responses until you specify it."""

    trust_chain: Annotated[
        OptionalNullable[str], pydantic.Field(alias="trustChain")
    ] = UNSET
    r"""The trust chain text. You may have many trust chains or none. Appears as `null` when no trust chains exist."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["trustChain"]
        nullable_fields = ["certificate", "trustChain"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PostChangeAllowedInputParamChangesRequestApplicationVndAkamaiCpsCertificateAndTrustChainV2PlusJSONRequestBodyTypedDict(
    TypedDict
):
    r"""A digital certificate containing an electronic document that includes company information, a public key, and a CA's digital signature based on its private key. A chain of trust verifies a digital certificate, whereby a certificate hierarchy lets individuals verify the validity of a certificate's issuer."""

    certificates_and_trust_chains: List[CertificatesAndTrustChainsTypedDict]
    r"""Certificate and trust chains."""


class PostChangeAllowedInputParamChangesRequestApplicationVndAkamaiCpsCertificateAndTrustChainV2PlusJSONRequestBody(
    BaseModel
):
    r"""A digital certificate containing an electronic document that includes company information, a public key, and a CA's digital signature based on its private key. A chain of trust verifies a digital certificate, whereby a certificate hierarchy lets individuals verify the validity of a certificate's issuer."""

    certificates_and_trust_chains: Annotated[
        List[CertificatesAndTrustChains],
        pydantic.Field(alias="certificatesAndTrustChains"),
    ]
    r"""Certificate and trust chains."""


class PostChangeAllowedInputParamRequestTypedDict(TypedDict):
    allowed_input_type_param: PathParamAllowedInputTypeParam
    r"""__Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details. Currently supported values include `change-management-ack`, `lets-encrypt-challenges-completed`, `post-verification-warnings-ack`, `pre-verification-warnings-ack`, `third-party-cert-and-trust-chain`."""
    change_id: int
    r"""The change for this enrollment on which to perform the desired operation."""
    enrollment_id: int
    r"""Enrollment on which to perform the desired operation."""
    account_switch_key: NotRequired[str]
    r"""For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys)."""
    request_body: NotRequired[
        PostChangeAllowedInputParamChangesRequestApplicationVndAkamaiCpsCertificateAndTrustChainV2PlusJSONRequestBodyTypedDict
    ]


class PostChangeAllowedInputParamRequest(BaseModel):
    allowed_input_type_param: Annotated[
        PathParamAllowedInputTypeParam,
        pydantic.Field(alias="allowedInputTypeParam"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""__Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](ref:change-input-content-type-mapping) for details. Currently supported values include `change-management-ack`, `lets-encrypt-challenges-completed`, `post-verification-warnings-ack`, `pre-verification-warnings-ack`, `third-party-cert-and-trust-chain`."""

    change_id: Annotated[
        int,
        pydantic.Field(alias="changeId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The change for this enrollment on which to perform the desired operation."""

    enrollment_id: Annotated[
        int,
        pydantic.Field(alias="enrollmentId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Enrollment on which to perform the desired operation."""

    account_switch_key: Annotated[
        Optional[str],
        pydantic.Field(alias="accountSwitchKey"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys)."""

    request_body: Annotated[
        Optional[
            PostChangeAllowedInputParamChangesRequestApplicationVndAkamaiCpsCertificateAndTrustChainV2PlusJSONRequestBody
        ],
        FieldMetadata(
            request=RequestMetadata(
                media_type="application/vnd.akamai.cps.certificate-and-trust-chain.v2+json"
            )
        ),
    ] = None


class PostChangeAllowedInputParamResponseBodyTypedDict(TypedDict):
    r"""The change for this enrollment on which to perform the desired operation."""

    change: str
    r"""Identifies the change to the enrollment."""


class PostChangeAllowedInputParamResponseBody(BaseModel):
    r"""The change for this enrollment on which to perform the desired operation."""

    change: str
    r"""Identifies the change to the enrollment."""
